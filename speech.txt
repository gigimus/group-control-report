Здравствуйте. Защищается студент группы с8503а, Спорышев Максим Сергеевич. Тема работы: разработка алгоритмов оптимизации групповой работы мобильных роботов.
Руководитель: научный сотрудник лаборатории необитаемых подводных аппаратов и их систем, Туфанов Игорь Евгеньевич. Соруководитель: старший преподаватель кафедры информатики, математического и компьютерного моделирования Кленин Александр Сергеевич.

Термины: АНПА - автономный необитаемый подводный аппарат.
СПУ - система программного управления
ГА - генетический алгоритм
МАРК - морской автономный робототехнический комплекс лаборатории НПА и их систем ДВФУ.

В настоящее время автономные подводные аппараты активно используются для решения так называемых обзорно-поисковых задач. Примерами таких задач могут быть: поиск затонувших объектов, замеры параметров водной среды, исследования локальных неоднородностей(загрязнений). Такого рода задания могут быть распределены по карте моря и их необходимо выполнить.

Развитие компьютерных технологий способствовало интеллектуализации аппаратов, что повело за собой усовершенствование методов решения обзорно-поисковых задач. Современные подходы часто исползуют группы АНПА для решения таких задач.

В ДВФУ система программного управления АНПА использует несколько этапов для составления плана действий нескольких аппаратов. 

Первый этап - составление всех заданий. Предполагается что каждый аппарат умеет выполнять каждое задание. Заданием, например, является съемка определенной области гидролокатором. Для i-го задания составляются v_i вариантов его выполнения, которые характеризуются трехмерной точкой начала выполнения задания, точкой конца и временем выполнения. Для каждого задания существует несколько вариантов выполнения, например задание съемки вдоль траектории можно выполнить двумя способами - от одной точки к другой или в обратном направлении. 

Следующий этап - распределения заданий происходит в рмаках следующей модели.
имеем n заданий и m аппаратов. Перед началом выполнения плана каждый аппарат находится в некоторой стартовой точке трехмерного пространства. Для определения времени перехода между точками используется функция времени перехода от одной точки к другой, соответствующая прееходу аппарата по прямой, соединящющей эти точки, с максимальной скоростью данного аппарата. План аппарата -- это последовательность пар номер задания номер варианта. Время его выполнения -- это сумма всех времен переехоодв между соответствующими концами вариантов заданий и сумма времен выполнения заданий. Общий план -- это совокупность планов аппаратов. Время его выполнения -- это максимальное из времен выполнений каждого плана. Необходимо найти общий план, доставляющий минимум в функцию времени выполнения.

На этом рисунке видно стартовые вершины аппаратов, времена переходов между заданиями. У, например этого задания одна точка является началом первого варанта этого задания и концом второго варианта, проходим ли мы этот отрезок в одном или другом направлении соответственно. 

В текущей системе управления для решения задачи планирования используется алгоритм Хельда-Карпа. Асимптотика времени его работы имеет экспоненциальную зависимость от количества заданий, что делает этот метод неподходящим для распределения от 20 заданий.

В связи с этим, целью данной работы являлоась разработка новых алгоритмов для решения задачи планирования, способных составлять планы для 100 заданий и 5 аппаратов за приемлемое время (несколько минут) и внудрить их в СПУ.


Данная модель появилась совсем недавно и найденные существующие подходы к решению задачи планирования используют только более упрощенную ее версию. 

Самое распространенная найденная модель -- это множественная задача коммивояжера. Каждое задание в ней это точка, которую необходимо посетить. Имеется полный граф, где вершины -- это задания, веса ребер это времена перехода между ними. Часто имеется только одна стартовая вершина для всех коммивояжеров. В задаче необходимо найти систему простых циклов, прхоодящих через все вершины графа. Количество циклов задано заранее. Максимальная стоимость цикла должна быть минимальна, либо суммарная стоимость всех циклов должна быть минимальна. Такая задача даже для системы из одного цикла является NP-полной, а это только частный случай нашей модели. Некоторые из найденных решений в этой области предполагалось обощить на нашу модель.

Первый разработанный подход исползует жадный алгоритм для решения поставленной задачи. Он находит лишь приближенное решение, однако быстро работает. Мы перебираем нмеор задания и номер варинта его выполнения. И жадно ищем самый лучший аппарат и место в плане этого аппарата, куда вставить это задание на данный момент.
После вставки задания в план необходимо пересчитать варианты выполнения так, чтобы для заданной последовательности заданий время выполнения плана было минимальным. Асимптотика времени работы алгоритма O(n^2).

Функция пересчитывающая варианты заданий устроена следующим образом.
На вход она принимает план некоторого аппарата. И решает задачу нахождения оптимальных номеров вариантов заданий, не изменяя номера заданий в последовательности. Для этого используется метод динамического программирования. Оптимальное время выполнения зависит от двух параметров, номер последнего задания в последовательности и номер его варианта выполнения. Тогда оптимальное время можно выразить следующим рекуурентным соотношением. Попутно запоминаем, из какого состояния получилось следующее, чтобы восстановить всю последовательность вариантов. Линейное время работы от количествав заданий в плане.

Следующий реализованный подход -- это генетический алгоритм. Для него решение было представлено в виде двух хромосом. Первая - перестановка номеров заданий, вторая - последовательность номеров аппаратов. Предполагается, что задания будут выполняться слева направо аппаратами, которые указаны в соответствующих местах второй хромосомы.

На каждой итерации генетического алгоритма каждая особь равновероятно подвергалась следующим мутациям.
Транспозиция двух равновероятно выбранных номеров заданий, Реверс номеров заданий в случайно выбранном промежутке, в произвольном месте замена номера аппарата на случайной выбранный новый.

Далее из поколения выживает некоторый заданный процент лучших особей. Остальные замещаются потомством. Для которого производится скрещивание нужного количества пар особей. Все особи равновероятно участвуют в скрещивании.

Имеются некоторы сложности в скрещивании хромосом-перестановок, ведь необходимо не нарушить перестановку. В качестве оператора скрещивания был выбрал Partially matched crossover, его действие показано на рисунке.

Функция приспособленнсти каждой особи использует вышеописанный метод динамического программирования для оптимального подбора вариантов для данной пары хромосом.

Асимптотика времени работы одной итерации O(sn + slogs), s - размер популяции.


Последний реализованный алгоритм основан на методе целочисленного программирования. Этот подход находит точное решение задачи. Аактивно используется в методах для решения задачи коммивояжера, которые решает ее за секунды для 100 вершин в графе.

Данный алгоритм был реализован для упрощенной задачи -- множественной задачи коммивояжера. Поставлена задачи линейно оптимизации, использован метод ветвей и границ для дискретной оптимизации.

Было использвано два подхода -- оптимизация максимума и перебор максимума бинарным поиском с добавлением дополнительных ограничений и оптимизацией суммы.

К сожалению данный алгоритм даже на упрощенной задаче работал медленнее алгоритма хельда карпа, поэтому его дальнейшее исследование было приостановлено.

В проекте использовались различные сторонние библиотеки для формулировки задачи целочисленного программирования, для метода ветвей и границ, для визуализации решений.

Визуализация решения в режиме отладки могла происходить на каждом шаге реализуемых алгоритмов.

Для сравнения качества алгоритмов с существующим решением использовался график времени выполнения полученного плана на каждом тесте. Видно что на маленьких маленьких тестах генетический алгоритм не проигрывает точному решению. В отличие от жадного. 

Также наблюдалось решение, получаемое генетическим алгоритмом в зависимости от количества итераций. 

Алгоритмы были внедрены в СПУ комплекса МАРК. Генетический алгоритм, работающий до двух минут, выигрывал у жадного решения только до 40 заданий. Далее целесообразно было запускать жадное решение. 

